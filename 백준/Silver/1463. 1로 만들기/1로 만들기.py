import sys

N = int(sys.stdin.readline())

# 최대 N만큼 dp 생성
dp = [0] * 1000001

for i in range (2, N+1):
  # 1을 뺀 경우
  dp[i] = dp[i-1] + 1

  # 2로 나누어 떨어지는 경우 (dp[i]는 이미 dp[i-1]에 1을 더한 값)
  if i%2 == 0:
    dp[i] = min(dp[i], dp[i//2] + 1)

  # 3으로 나누어 떨어지는 경우 (dp[i]는 이미 dp[i]와 dp[i//2] + 1 중 작은 값)
  if i%3 == 0:
    dp[i] = min(dp[i], dp[i//3] + 1)

print(dp[N])

"""
dp = [0] * 1000001으로 놓는 것과 dp = [0] * (N+1)로 놓는 것에 시간 차이 발생.
dp = [0] * (N+1)로 놓을 경우 메모리 재할당이 필요하고 N에 따라 리스트 크기를 결정해야하므로 런타임에 추가적인 처리가 필요하여 상수로 놓을 때보다 시간이 오래 걸림.
N의 최댓값이 정해져있다면 처음부터 최댓값으로 배열의 크기를 정하는 것이 효율적
"""
